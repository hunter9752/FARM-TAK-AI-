#!/usr/bin/env python3
"""
Integrated Farmer Assistant
Combines STT (Speech-to-Text) with NLP (Intent Detection)
"""

import sys
import os
import json
import time
from datetime import datetime

# Add parent directory to path to import STT modules
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'stt vosk model'))

try:
    from improved_stt import ImprovedSTT
except ImportError:
    print("тЭМ Could not import STT module. Please ensure 'stt vosk model' folder exists.")
    sys.exit(1)

from farmer_intent_detector import FarmerIntentDetector


class IntegratedFarmerAssistant:
    """Complete farmer assistant with speech recognition and intent detection"""
    
    def __init__(self):
        """Initialize the integrated system"""
        print("ЁЯМ╛ Initializing Farmer Assistant...")
        
        # Initialize STT system
        try:
            self.stt = ImprovedSTT()
            print("тЬЕ Speech-to-Text system loaded")
        except Exception as e:
            print(f"тЭМ Failed to load STT system: {e}")
            sys.exit(1)
        
        # Initialize NLP system
        try:
            self.nlp = FarmerIntentDetector()
            print("тЬЕ Intent detection system loaded")
        except Exception as e:
            print(f"тЭМ Failed to load NLP system: {e}")
            sys.exit(1)
        
        # Session tracking
        self.session_start = datetime.now()
        self.total_interactions = 0
        self.successful_intents = 0
        
        # Response database
        self.setup_response_database()
    
    def setup_response_database(self):
        """Setup detailed responses for farming intents"""
        self.detailed_responses = {
            "crop_planting": {
                "wheat": "рдЧреЗрд╣реВрдВ рдмреЛрдиреЗ рдХрд╛ рд╕рд╣реА рд╕рдордп рдирд╡рдВрдмрд░-рджрд┐рд╕рдВрдмрд░ рд╣реИред 100-120 рдХрд┐рд▓реЛ рдмреАрдЬ рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯреЗрдпрд░ рдЪрд╛рд╣рд┐рдПред",
                "rice": "рдзрд╛рди рдХреА рд░реЛрдкрд╛рдИ рдЬреВрди-рдЬреБрд▓рд╛рдИ рдореЗрдВ рдХрд░реЗрдВред рдкрд╣рд▓реЗ рдирд░реНрд╕рд░реА рддреИрдпрд╛рд░ рдХрд░реЗрдВред",
                "corn": "рдордХреНрдХрд╛ рдХреА рдмреБрдЖрдИ рдЬреВрди-рдЬреБрд▓рд╛рдИ рдореЗрдВ рдХрд░реЗрдВред 20-25 рдХрд┐рд▓реЛ рдмреАрдЬ рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯреЗрдпрд░ред",
                "default": "рдлрд╕рд▓ рдмреЛрдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рдорд┐рдЯреНрдЯреА рдХреА рдЬрд╛рдВрдЪ рдХрд░рд╛рдПрдВ рдФрд░ рдЙрдЪрд┐рдд рдмреАрдЬ рдЪреБрдиреЗрдВред"
            },
            
            "crop_disease": {
                "wheat": "рдЧреЗрд╣реВрдВ рдореЗрдВ рд░рддреБрдЖ рд░реЛрдЧ рд╣реЛ рд╕рдХрддрд╛ рд╣реИред рдкреНрд░реЛрдкрд┐рдХреЛрдирд╛рдЬреЛрд▓ рдХрд╛ рдЫрд┐рдбрд╝рдХрд╛рд╡ рдХрд░реЗрдВред",
                "rice": "рдзрд╛рди рдореЗрдВ рдмреНрд▓рд╛рд╕реНрдЯ рд░реЛрдЧ рдХреЗ рд▓рд┐рдП рдЯреНрд░рд╛рдЗрд╕рд╛рдЗрдХреНрд▓рд╛рдЬреЛрд▓ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВред",
                "default": "рддреБрд░рдВрдд рдХреГрд╖рд┐ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред рдлреЛрдЯреЛ рднреЗрдЬрдХрд░ рд╕рд▓рд╛рд╣ рд▓реЗрдВред"
            },
            
            "market_price": {
                "wheat": "рдЧреЗрд╣реВрдВ рдХрд╛ рдЖрдЬ рдХрд╛ рднрд╛рд╡ тВ╣2100-2200 рдкреНрд░рддрд┐ рдХреНрд╡рд┐рдВрдЯрд▓ рд╣реИред",
                "rice": "рдзрд╛рди рдХрд╛ рднрд╛рд╡ тВ╣1800-1900 рдкреНрд░рддрд┐ рдХреНрд╡рд┐рдВрдЯрд▓ рдЪрд▓ рд░рд╣рд╛ рд╣реИред",
                "default": "рдордВрдбреА рднрд╛рд╡ рдХреЗ рд▓рд┐рдП eNAM рдкреЛрд░реНрдЯрд▓ рджреЗрдЦреЗрдВ рдпрд╛ рд╕реНрдерд╛рдиреАрдп рдордВрдбреА рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред"
            },
            
            "fertilizer_advice": {
                "wheat": "рдЧреЗрд╣реВрдВ рдХреЗ рд▓рд┐рдП NPK 120:60:40 рдХрд┐рд▓реЛ рдкреНрд░рддрд┐ рд╣реЗрдХреНрдЯреЗрдпрд░ рджреЗрдВред",
                "rice": "рдзрд╛рди рдХреЗ рд▓рд┐рдП 150:75:75 NPK рдФрд░ рдЬрд┐рдВрдХ рд╕рд▓реНрдлреЗрдЯ рджреЗрдВред",
                "default": "рдорд┐рдЯреНрдЯреА рдкрд░реАрдХреНрд╖рдг рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рд╕рдВрддреБрд▓рд┐рдд рдЙрд░реНрд╡рд░рдХ рдХрд╛ рдкреНрд░рдпреЛрдЧ рдХрд░реЗрдВред"
            },
            
            "irrigation_need": {
                "wheat": "рдЧреЗрд╣реВрдВ рдореЗрдВ 4-5 рд╕рд┐рдВрдЪрд╛рдИ рдЪрд╛рд╣рд┐рдПред рдкрд╣рд▓реА рд╕рд┐рдВрдЪрд╛рдИ 20-25 рджрд┐рди рдмрд╛рджред",
                "rice": "рдзрд╛рди рдореЗрдВ рд╣рдореЗрд╢рд╛ 2-3 рдЗрдВрдЪ рдкрд╛рдиреА рд░рдЦреЗрдВред",
                "default": "рдорд┐рдЯреНрдЯреА рдХреА рдирдореА рджреЗрдЦрдХрд░ рд╕рд┐рдВрдЪрд╛рдИ рдХрд░реЗрдВред рд╕реБрдмрд╣ рдпрд╛ рд╢рд╛рдо рдХрд╛ рд╕рдордп рдмреЗрд╣рддрд░ рд╣реИред"
            },
            
            "government_scheme": {
                "default": "PM-KISAN, рдлрд╕рд▓ рдмреАрдорд╛ рдпреЛрдЬрдирд╛, KCC рд▓реЛрди рдЙрдкрд▓рдмреНрдз рд╣реИред рдирдЬрджреАрдХреА рдХреГрд╖рд┐ рдХрд╛рд░реНрдпрд╛рд▓рдп рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред"
            }
        }
    
    def get_detailed_response(self, intent_result):
        """Generate detailed farming advice based on intent and entities"""
        intent = intent_result["intent"]
        entities = intent_result["entities"]
        
        if intent == "unknown":
            return "рдореБрдЭреЗ рдЖрдкрдХреА рдмрд╛рдд рд╕рдордЭ рдирд╣реАрдВ рдЖрдИред рдХреГрдкрдпрд╛ рд╕реНрдкрд╖реНрдЯ рд░реВрдк рд╕реЗ рдЕрдкрдирд╛ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВред"
        
        # Get crop-specific response if crop is detected
        detected_crop = None
        if "crops" in entities and entities["crops"]:
            detected_crop = entities["crops"][0]
        
        # Get response from database
        if intent in self.detailed_responses:
            responses = self.detailed_responses[intent]
            if detected_crop and detected_crop in responses:
                response = responses[detected_crop]
            else:
                response = responses.get("default", "рдЖрдкрдХреА рд╕рдорд╕реНрдпрд╛ рд╕рдордЭ рдЧрдИ рд╣реИред")
        else:
            response = "рдЗрд╕ рд╡рд┐рд╖рдп рдкрд░ рдЕрдзрд┐рдХ рдЬрд╛рдирдХрд╛рд░реА рдХреЗ рд▓рд┐рдП рдХреГрд╖рд┐ рд╡рд┐рд╢реЗрд╖рдЬреНрдЮ рд╕реЗ рд╕рдВрдкрд░реНрдХ рдХрд░реЗрдВред"
        
        # Add confidence indicator
        confidence = intent_result["confidence"]
        if confidence < 0.7:
            response += "\n\nтЪая╕П рдХреГрдкрдпрд╛ рдЕрдкрдирд╛ рд╕рд╡рд╛рд▓ рдФрд░ рд╕реНрдкрд╖реНрдЯ рдХрд░реЗрдВред"
        
        return response
    
    def display_welcome(self):
        """Display welcome message"""
        print("=" * 80)
        print("ЁЯМ╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ - рдХрд┐рд╕рд╛рди рд╕рд╣рд╛рдпрдХ (Farmer Assistant)")
        print("ЁЯОд рдмреЛрд▓рдХрд░ рдЕрдкрдиреЗ рдЦреЗрддреА рдХреЗ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВ")
        print("=" * 80)
        print("ЁЯУЛ рдореИрдВ рдЗрди рд╡рд┐рд╖рдпреЛрдВ рдореЗрдВ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ:")
        print("  тАв рдлрд╕рд▓ рдмреБрдЖрдИ рдФрд░ рдХрдЯрд╛рдИ")
        print("  тАв рд░реЛрдЧ рдФрд░ рдХреАрдЯ рдирд┐рдпрдВрддреНрд░рдг") 
        print("  тАв рдореМрд╕рдо рдФрд░ рд╕рд┐рдВрдЪрд╛рдИ")
        print("  тАв рдмрд╛рдЬрд╛рд░ рднрд╛рд╡ рдФрд░ рдмрд┐рдХреНрд░реА")
        print("  тАв рдЦрд╛рдж рдФрд░ рдмреАрдЬ рдХреА рд╕рд▓рд╛рд╣")
        print("  тАв рд╕рд░рдХрд╛рд░реА рдпреЛрдЬрдирд╛рдПрдВ")
        print("=" * 80)
    
    def process_speech_input(self, transcribed_text):
        """Process transcribed speech through NLP"""
        if not transcribed_text or len(transcribed_text.strip()) < 3:
            return None
        
        print(f"\nЁЯОд рдЖрдкрдиреЗ рдХрд╣рд╛: {transcribed_text}")
        
        # Detect intent using NLP
        intent_result = self.nlp.detect_intent(transcribed_text)
        
        # Generate detailed response
        response = self.get_detailed_response(intent_result)
        
        # Display results
        print(f"\nЁЯОп рд╕рдордЭрд╛ рдЧрдпрд╛ рд╡рд┐рд╖рдп: {intent_result['intent']}")
        print(f"ЁЯУК рд╡рд┐рд╢реНрд╡рд╕рдиреАрдпрддрд╛: {intent_result['confidence']:.2f}")
        
        if intent_result['entities']:
            print(f"ЁЯП╖я╕П рдкрд╣рдЪрд╛рдиреЗ рдЧрдП рддрддреНрд╡: {intent_result['entities']}")
        
        print(f"\nЁЯТм рд╕рд▓рд╛рд╣:")
        print(f"   {response}")
        
        # Update session stats
        self.total_interactions += 1
        if intent_result['is_confident']:
            self.successful_intents += 1
        
        return intent_result
    
    def run_integrated_session(self):
        """Run the integrated STT + NLP session"""
        try:
            # Display welcome
            self.display_welcome()
            
            # Setup STT system
            if not self.stt.select_language():
                return
            
            if not self.stt.load_improved_model():
                return
            
            print("\nЁЯОп рд╕рд┐рд╕реНрдЯрдо рддреИрдпрд╛рд░ рд╣реИ! рдмреЛрд▓рдирд╛ рд╢реБрд░реВ рдХрд░реЗрдВ...")
            print("ЁЯТб рд╕реНрдкрд╖реНрдЯ рд░реВрдк рд╕реЗ рдФрд░ рдзреАрд░реЗ-рдзреАрд░реЗ рдмреЛрд▓реЗрдВ")
            print("ЁЯЫС рд░реЛрдХрдиреЗ рдХреЗ рд▓рд┐рдП Ctrl+C рджрдмрд╛рдПрдВ")
            print("-" * 80)
            
            # Start STT with NLP integration
            self.stt.is_running = True
            
            # Modified audio processing for integration
            import threading
            audio_thread = threading.Thread(target=self.integrated_audio_processing, daemon=True)
            audio_thread.start()
            
            # Start audio stream
            import sounddevice as sd
            with sd.RawInputStream(
                samplerate=self.stt.sample_rate,
                blocksize=self.stt.block_size,
                device=None,
                dtype='float32',
                channels=1,
                callback=self.stt.audio_callback
            ):
                print(f"ЁЯОд рд╕реБрди рд░рд╣рд╛ рд╣реВрдВ... (Sample rate: {self.stt.sample_rate} Hz)")
                
                while self.stt.is_running:
                    time.sleep(0.1)
                    
        except KeyboardInterrupt:
            print("\n\nЁЯЫС рд╕рд┐рд╕реНрдЯрдо рдмрдВрдж рдХрд░ рд░рд╣реЗ рд╣реИрдВ...")
            self.stt.is_running = False
            self.show_session_summary()
            
        except Exception as e:
            print(f"тЭМ Error: {e}")
            self.stt.is_running = False
    
    def integrated_audio_processing(self):
        """Modified audio processing with NLP integration"""
        import queue
        import json
        import numpy as np
        
        last_partial = ""
        audio_count = 0
        
        while self.stt.is_running:
            try:
                # Get audio data from queue
                data = self.stt.audio_queue.get(timeout=1)
                audio_count += 1
                
                # Show audio activity (less frequent to avoid clutter)
                if audio_count % 10 == 0:
                    audio_array = np.frombuffer(data, dtype=np.int16).astype(np.float32) / 32767.0
                    volume = np.sqrt(np.mean(audio_array**2))
                    
                    bar_length = 20
                    filled_length = int(bar_length * min(volume * 20, 1.0))
                    bar = 'тЦИ' * filled_length + 'тЦС' * (bar_length - filled_length)
                    
                    if volume > 0.05:
                        status = "ЁЯЯв"
                    elif volume > 0.02:
                        status = "ЁЯЯб"
                    else:
                        status = "ЁЯФ┤"
                    
                    print(f"\rЁЯОд |{bar}| {status}", end='', flush=True)
                
                # Process with recognizer
                if self.stt.recognizer.AcceptWaveform(data):
                    # Final result - process with NLP
                    result = json.loads(self.stt.recognizer.Result())
                    text = result.get('text', '').strip()
                    
                    if text and len(text) > 2:
                        # Clear the audio bar
                        print("\r" + " " * 50 + "\r", end='')
                        
                        # Process through NLP
                        self.process_speech_input(text)
                        
                        print("\n" + "тФА" * 80)
                        print("ЁЯОд рдЕрдЧрд▓рд╛ рд╕рд╡рд╛рд▓ рдмреЛрд▓реЗрдВ...")
                        
                        last_partial = ""
                else:
                    # Partial result (show less frequently)
                    partial = json.loads(self.stt.recognizer.PartialResult())
                    partial_text = partial.get('partial', '').strip()
                    
                    if partial_text and partial_text != last_partial and len(partial_text) > 3:
                        print(f"\rЁЯОд рд╕реБрди рд░рд╣рд╛ рд╣реВрдВ: {partial_text[:50]}...", end='', flush=True)
                        last_partial = partial_text
                        
            except queue.Empty:
                continue
            except Exception as e:
                print(f"\nтЭМ Audio processing error: {e}")
    
    def show_session_summary(self):
        """Show session statistics"""
        session_duration = datetime.now() - self.session_start
        
        print("\nЁЯУК рд╕рддреНрд░ рдХреА рд░рд┐рдкреЛрд░реНрдЯ:")
        print("=" * 50)
        print(f"тП▒я╕П рдХреБрд▓ рд╕рдордп: {session_duration}")
        print(f"ЁЯТм рдХреБрд▓ рдмрд╛рддрдЪреАрдд: {self.total_interactions}")
        print(f"тЬЕ рд╕рдлрд▓ рдкрд╣рдЪрд╛рди: {self.successful_intents}")
        
        if self.total_interactions > 0:
            success_rate = (self.successful_intents / self.total_interactions) * 100
            print(f"ЁЯУИ рд╕рдлрд▓рддрд╛ рджрд░: {success_rate:.1f}%")
        
        # Show NLP conversation summary
        nlp_summary = self.nlp.get_conversation_summary()
        if nlp_summary.get("total_interactions", 0) > 0:
            print(f"ЁЯОп рдФрд╕рдд рд╡рд┐рд╢реНрд╡рд╕рдиреАрдпрддрд╛: {nlp_summary['average_confidence']:.2f}")
            print("ЁЯУЛ рдореБрдЦреНрдп рд╡рд┐рд╖рдп:")
            for intent, count in nlp_summary['intent_distribution'].items():
                print(f"   тАв {intent}: {count} рдмрд╛рд░")
        
        print("\nЁЯЩП рдзрдиреНрдпрд╡рд╛рдж! рдЦреЗрддреА рдореЗрдВ рд╕рдлрд▓рддрд╛ рдХреА рд╢реБрднрдХрд╛рдордирд╛рдПрдВ!")


def main():
    """Main function"""
    try:
        assistant = IntegratedFarmerAssistant()
        assistant.run_integrated_session()
    except KeyboardInterrupt:
        print("\nЁЯСЛ рдЕрд▓рд╡рд┐рджрд╛!")
    except Exception as e:
        print(f"тЭМ System error: {e}")


if __name__ == "__main__":
    main()
